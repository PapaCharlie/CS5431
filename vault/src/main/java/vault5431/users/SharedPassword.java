package vault5431.users;

import org.json.JSONException;
import org.json.JSONObject;
import vault5431.io.Base64String;

import java.io.IOException;
import java.util.HashSet;
import java.util.UUID;

/**
 * Password class. Represents an entry in the password vault.
 *
 * @author papacharlie
 */
public final class SharedPassword {

    private static final class SJCLObject extends JSONObject {

        SJCLObject(String field, int maxlength) throws JSONException {
            super(field);
            if (!has("iv") || !has("ct") || !has("kemtag")) {
                throw new IllegalArgumentException("All SJCL fields are required.");
            }
            for (String key : new HashSet<>(keySet())) {
                if (!(key.equals("iv") || key.equals("ct") || key.equals("kemtag"))) {
                    remove(key);
                }
            }
            int kemtag = new Base64String(getString("kemtag")).decodeBytes().length;
            if (kemtag != 128) {
                throw new IllegalArgumentException("kemtag is not 128 bytes long.");
            }
            int iv = new Base64String(getString("iv")).decodeBytes().length;
            if (iv != 24) {
                throw new IllegalArgumentException("iv is not 24 bytes long.");
            }
            int ct = new Base64String(getString("ct")).decodeBytes().length;
            if (ct % 4 != 0) {
                throw new IllegalArgumentException("Invalid encrypted text.");
            }
            if (ct > maxlength) {
                throw new IllegalArgumentException("Encrypted text is too long!");
            }
        }

    }

    private String sharer;
    private SJCLObject name;
    private SJCLObject url;
    private SJCLObject username;
    private SJCLObject password;
    private SJCLObject notes;
    private Base64String signature;
    private UUID id;

    /**
     * Creates a new SharedPassword instance. This constructor limits the total stored size of the instance. Used when
     * loading instances from disk.
     *
     * @param sharer    user sharing this password
     * @param name      website's name
     * @param url       website's url
     * @param username  website's username
     * @param password  website's password
     * @param signature signature generated by sharer's private key
     * @param id        unique id for indexing server/client side
     * @throws IllegalArgumentException When any of the fields are empty, or either exceed the max size of 750 characters.
     */
    private SharedPassword(String sharer, String name, String url, String username, String password, String notes, Base64String signature, UUID id) throws IllegalArgumentException {
        try {
            if (UserManager.userExists(sharer)) {
                this.sharer = sharer;
            } else {
                throw new IllegalArgumentException("Sharer does not exist!");
            }
            this.name = new SJCLObject(name, 150); // 100 char limit
            this.url = new SJCLObject(url, 512);
            this.username = new SJCLObject(username, 150);
            this.password = new SJCLObject(password, 150);
            this.notes = new SJCLObject(notes, 1350); // 1000 char limit
            if (signature.size() == 128) {
                this.signature = signature;
            } else {
                throw new IllegalArgumentException("Signature is invalid!");
            }
            this.id = id;
        } catch (JSONException err) {
            err.printStackTrace();
            throw new IllegalArgumentException("All fields must be valid JSON");
        } catch (NullPointerException err) {
            throw new IllegalArgumentException("All fields required");
        }
    }

    /**
     * Parses a JSON object ideally created by {@link #toJSONObject}, otherwise simply requires all fields be present in the object.
     *
     * @param json JSONObject representing the Password
     * @return Password instance parsed from JSON.
     * @throws IllegalArgumentException Thrown by Password constructor or if JSON object does not contain all required
     *                                  fields.
     */
    public static SharedPassword fromJSON(JSONObject json) throws IllegalArgumentException {
        if (json.has("sharer") && json.has("name") && json.has("url") && json.has("username") && json.has("password") && json.has("notes") && json.has("signature") && json.has("id")) {
            return new SharedPassword(
                    json.get("sharer").toString(),
                    json.get("name").toString(),
                    json.get("url").toString(),
                    json.get("username").toString(),
                    json.get("password").toString(),
                    json.get("notes").toString(),
                    Base64String.fromBase64(json.get("signature").toString()),
                    UUID.fromString(json.getString("id"))
            );
        } else {
            throw new IllegalArgumentException("All fields required");
        }
    }

    public static SharedPassword fromJSON(String json) throws IllegalArgumentException {
        try {
            return fromJSON(new JSONObject(json));
        } catch (JSONException err) {
            throw new IllegalArgumentException("Invalid JSON");
        }
    }

    public static SharedPassword fromJSON(Base64String json) {
        return fromJSON(json.decodeString());
    }

    /**
     * @return The JSON representation of the SharedPassword.
     */
    public JSONObject toJSONObject() {
        JSONObject json = new JSONObject();
        json.put("sharer", sharer);
        json.put("name", name);
        json.put("url", url);
        json.put("username", username);
        json.put("password", password);
        json.put("notes", notes);
        json.put("signature", signature.getB64String());
        json.put("id", id.toString());
        return json;
    }

    public User getSharerUser() {
        return UserManager.getUser(sharer);
    }

    protected JSONObject getPassword() {
        return password;
    }

    protected JSONObject getUsername() {
        return username;
    }

    protected JSONObject getUrl() {
        return url;
    }

    protected JSONObject getName() {
        return name;
    }

    public String getSharer() {
        return sharer;
    }

    public String getSharerPublicSigningKey() throws IOException {
        return UserManager.getUser(sharer).loadPublicSigningKey();
    }

    public String toJSON() {
        return toJSONObject().toString();
    }

    /**
     * @return The Password's unique ID.
     */
    public UUID getID() {
        return id;
    }

    protected void newUUID() {
        id = UUID.randomUUID();
    }

    public int hashCode() {
        return id.hashCode();
    }

    public boolean equals(Object obj) {
        if (obj instanceof SharedPassword) {
            SharedPassword other = (SharedPassword) obj;
            return id.equals(other.id);
        } else {
            return false;
        }
    }

}
