package vault5431.users;

import org.json.JSONException;
import org.json.JSONObject;
import vault5431.io.Base64String;

import java.io.IOException;
import java.util.UUID;

/**
 * Password class. Represents an entry in the password vault.
 *
 * @author papacharlie
 */
public final class SharedPassword {

    /**
     * Tested with sjcl: sjcl encrypts a 500 character string to a JSON object shorter than 750 characters.
     */
    protected static final int MAX_ENCRYPTED_LENGTH = 750;

    private String sharer;
    private JSONObject name;
    private JSONObject url;
    private JSONObject username;
    private JSONObject password;
    private Base64String signature;
    private UUID id;

    /**
     * Creates a new SharedPassword instance. This constructor limits the total stored size of the instance. Used when
     * loading instances from disk.
     *
     * @param sharer    user sharing this password
     * @param name      website's name
     * @param url       website's url
     * @param username  website's username
     * @param password  website's password
     * @param signature signature generated by sharer's private key
     * @param id        unique id for indexing server/client side
     * @throws IllegalArgumentException When any of the fields are empty, or either exceed the max size of 750 characters.
     */
    private SharedPassword(String sharer, String name, String url, String username, String password, Base64String signature, UUID id) throws IllegalArgumentException {
        try {
            if (UserManager.userExists(sharer)) {
                this.sharer = sharer;
            } else {
                throw new IllegalArgumentException("Sharer does not exist!");
            }
            if (0 < name.length() && name.length() < MAX_ENCRYPTED_LENGTH) {
                this.name = new JSONObject(name);
            } else {
                throw new IllegalArgumentException("Website name is too long.");
            }
            if (0 < url.length() && url.length() < MAX_ENCRYPTED_LENGTH) {
                this.url = new JSONObject(url);
            } else {
                throw new IllegalArgumentException("Website URL is too long.");
            }
            if (0 < username.length() && username.length() < MAX_ENCRYPTED_LENGTH) {
                this.username = new JSONObject(username);
            } else {
                throw new IllegalArgumentException("Username is too long.");
            }
            if (0 < password.length() && password.length() < MAX_ENCRYPTED_LENGTH) {
                this.password = new JSONObject(password);
            } else {
                throw new IllegalArgumentException("Password is too long.");
            }
            if (signature.size() == 128) {
                this.signature = signature;
            } else {
                throw new IllegalArgumentException("Signature is invalid!");
            }
            this.id = id;
        } catch (JSONException err) {
            throw new IllegalArgumentException("All fields must be valid JSON");
        } catch (NullPointerException err) {
            throw new IllegalArgumentException("All fields required");
        }
    }

    /**
     * To be used when creating a new password instance that will be saved to disk. Generates a new unique id.s
     *
     * @param sharer    user sharing this password
     * @param name      website's name
     * @param url       website's url
     * @param username  website's username
     * @param password  website's password
     * @param signature signature generated by sharer's private key
     * @throws IllegalArgumentException When any of the fields are empty, or either exceed the max size of 750 characters.
     */
    public SharedPassword(String sharer, String name, String url, String username, String password, Base64String signature) throws IllegalArgumentException {
        this(sharer, name, url, username, password, signature, UUID.randomUUID());
    }

    /**
     * Parses a JSON object ideally created by {@link #toJSONObject}, otherwise simply requires all fields be present in the object.
     *
     * @param json JSONObject representing the Password
     * @return Password instance parsed from JSON.
     * @throws IllegalArgumentException Thrown by Password constructor or if JSON object does not contain all required
     *                                  fields.
     */
    public static SharedPassword fromJSON(JSONObject json) throws IllegalArgumentException {
        if (json.has("sharer") && json.has("name") && json.has("url") && json.has("username") && json.has("password") && json.has("signature") && json.has("id")) {
            return new SharedPassword(
                    json.get("sharer").toString(),
                    json.get("name").toString(),
                    json.get("url").toString(),
                    json.get("username").toString(),
                    json.get("password").toString(),
                    Base64String.fromBase64(json.get("signature").toString()),
                    UUID.fromString(json.getString("id"))
            );
        } else {
            throw new IllegalArgumentException("All fields required");
        }
    }

    public static SharedPassword fromJSON(String json) throws IllegalArgumentException {
        try {
            return fromJSON(new JSONObject(json));
        } catch (JSONException err) {
            throw new IllegalArgumentException("Invalid JSON");
        }
    }

    public static SharedPassword fromJSON(Base64String json) {
        return fromJSON(json.decodeString());
    }

    /**
     * @return The JSON representation of the SharedPassword.
     */
    public JSONObject toJSONObject() {
        JSONObject json = new JSONObject();
        json.put("sharer", sharer);
        json.put("name", name);
        json.put("url", url);
        json.put("username", username);
        json.put("password", password);
        json.put("signature", signature.getB64String());
        json.put("id", id.toString());
        return json;
    }

    public User getSharerUser() {
        return UserManager.getUser(sharer);
    }

    protected JSONObject getPassword() {
        return password;
    }

    protected JSONObject getUsername() {
        return username;
    }

    protected JSONObject getUrl() {
        return url;
    }

    protected JSONObject getName() {
        return name;
    }

    public String getSharer() {
        return sharer;
    }

    public String getSharerPublicSigningKey() throws IOException {
        return UserManager.getUser(sharer).loadPublicSigningKey();
    }

    public String toJSON() {
        return toJSONObject().toString();
    }

    /**
     * @return The Password's unique ID.
     */
    public UUID getID() {
        return id;
    }

    public int hashCode() {
        return id.hashCode();
    }

    public boolean equals(Object obj) {
        if (obj instanceof SharedPassword) {
            SharedPassword other = (SharedPassword) obj;
            return sharer.equals(other.sharer)
                    && name.equals(other.name)
                    && url.equals(other.url)
                    && username.equals(other.username)
                    && password.equals(other.password)
                    && signature.equals(other.signature)
                    && id.equals(other.id);
        } else {
            return false;
        }
    }

}
